"""
Django settings for xplace project.

Generated by 'django-admin startproject' using Django 2.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""
import logging
import os
import environ

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
from django.urls import reverse_lazy

import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration

from .menus import *

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

env = environ.Env()

environ.Env.read_env()


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str(
    "SECRET_KEY", default="1!*66ndmp2w26h&%o5kac+br14(8hrde0kev__8k(!1y%5-ra("
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG", default=True)

ALLOWED_HOSTS = env.list("ALLOWED_HOSTS", default=["*"])


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "drf_yasg",
    "django_extensions",
    "django_filters",
    "corsheaders",
    "django_dramatiq",
    "xplace.base.apps.BaseConfig",
    "xplace.layout.apps.LayoutConfig",
    "xplace.users.apps.UsersConfig",
    "xplace.users.ssh_keys.apps.SshKeysConfig",
    "xplace.compute.apps.ComputeConfig",
    "xplace.compute.containers.apps.ContainersConfig",
    "xplace.compute.hosts.apps.HostsConfig",
    "xplace.network.apps.NetworkConfig",
    "xplace.network.domains.apps.DomainsConfig",
    "xplace.support.apps.SupportConfig",
    "xplace.events.apps.EventsConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "xplace.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "layout", "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "xplace.wsgi.application"


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases
DATABASES = {
    "default": env.db(
        "DATABASE_URL",
        default="sqlite:///{}".format(os.path.join(BASE_DIR, "db.sqlite3")),
    )
}

for key, db in DATABASES.items():
    db.setdefault("ATOMIC_REQUESTS", True)
    db.setdefault("AUTOCOMMIT", True)


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = env.str("STATIC_URL", default="/django-static/")
STATIC_ROOT = env.str("STATIC_ROOT", default=None)

AUTH_USER_MODEL = "users.User"

FROM_EMAIL = env.str("FROM_EMAIL", default="no-reply@xplace.pro")
DEFAULT_FROM_EMAIL = FROM_EMAIL

EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

EMAIL_CONFIG = env.email_url("EMAIL_URL", default="consolemail://")

vars().update(EMAIL_CONFIG)

SENTRY_DSN = env.str("SENTRY_DSN", default=None)

if SENTRY_DSN:
    sentry_sdk.init(
        dsn=SENTRY_DSN,
        integrations=[DjangoIntegration()],
    )

CACHES = {"default": env.cache("CACHE_URL", default="dummycache://")}

DRAMATIQ_BROKER_URL = env.str("DRAMATIQ_BROKER_URL", default="amqp://xplace:xplace@rabbitmq:5672")
DRAMATIQ_RESULT_URL = env.str("DRAMATIQ_RESULT_URL", default="redis://redis:6379")

DRAMATIQ_BROKER = {
    "BROKER": "dramatiq.brokers.rabbitmq.RabbitmqBroker",
    "OPTIONS": {
        "url": DRAMATIQ_BROKER_URL,
    },
    "MIDDLEWARE": [
        "dramatiq.middleware.Prometheus",
        "dramatiq.middleware.AgeLimit",
        "dramatiq.middleware.TimeLimit",
        "dramatiq.middleware.Callbacks",
        "dramatiq.middleware.Retries",
    ],
}

DRAMATIQ_RESULT_BACKEND = {
    "BACKEND": "dramatiq.results.backends.redis.RedisBackend",
    "BACKEND_OPTIONS": {
        "url": DRAMATIQ_RESULT_URL,
    },
    "MIDDLEWARE_OPTIONS": {"result_ttl": 3600000},
}

LOGIN_REDIRECT_URL = reverse_lazy("compute:containers:list")
LOGIN_URL = "/account/login/"
LOGOUT_URL = "/account/logout/"

REST_FRAMEWORK = {
    "DEFAULT_FILTER_BACKENDS": ("django_filters.rest_framework.DjangoFilterBackend",),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "xplace.users.authentication.TokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ),
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 25,
}

ALLOWED_CONFIRM_DOMAINS = env.list(
    "ALLOWED_CONFIRM_DOMAINS", default=["localhost", "xplace.pro"]
)


SIGNUP_CONFIRMATION_PATH = env.str(
    "SIGNUP_CONFIRMATION_PATH", default="/register-confirm"
)
RESET_PASSWORD_CONFIRMATION_PATH = env.str(
    "RESET_PASSWORD_CONFIRMATION_PATH", default="/reset-confirm"
)


SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {
        "Bearer": {"type": "apiKey", "name": "Authorization", "in": "header"}
    },
    "USE_SESSION_AUTH": True,
}

CORS_ORIGIN_WHITELIST = env.list(
    "CORS_ORIGIN_WHITELIST", default=["http://localhost:3000", "http://127.0.0.1:3000"]
)

APPEND_SLASH = False


class StaticFieldFilter(logging.Filter):
    """
    Python logging filter that adds the given static contextual information
    in the ``fields`` dictionary to all logging records.
    """

    def __init__(self, fields):
        self.static_fields = fields

    def filter(self, record):
        for k, v in self.static_fields.items():
            setattr(record, k, v)
        return True


class RequestFilter(logging.Filter):
    """
    Python logging filter that removes the (non-pickable) Django ``request``
    object from the logging record.
    """

    def filter(self, record):
        if hasattr(record, "request"):
            del record.request
        return True


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "root": {
        "level": "INFO",
        "handlers": ["console"],
    },
    "formatters": {
        "verbose": {
            "format": "%(levelname)s %(asctime)s %(module)s "
            "%(process)d %(thread)d %(message)s"
        },
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
    "filters": {
        "static_fields": {
            "()": StaticFieldFilter,
            "fields": {
                "project": "xplace",
                "environment": "production",
            },
        },
        "django_exc": {
            "()": RequestFilter,
        },
    },
    # 'loggers': {
    #     'streaming': {'handlers': ['sentry'], 'level': 'INFO'}
    # },
}

NAMEKO_CONFIG = {
    "AMQP_URI": env.str("AMQP_URI", "pyamqp://guest:guest@localhost:5672/xplace")
}

MAX_BACKUPS = 2

try:
    from settings_local import *
except ImportError:
    pass
